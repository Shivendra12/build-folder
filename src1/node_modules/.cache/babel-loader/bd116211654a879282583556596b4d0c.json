{"ast":null,"code":"import decode from 'jwt-decode';\nexport default class AuthService {\n  constructor(domain) {\n    this.domain = domain || 'http://localhost:4000'; //API Service Domain\n\n    this.fetch = this.fetch.bind(this);\n    this.login = this.login.bind(this);\n    this.getProfile = this.getProfile.bind(this);\n  }\n\n  login(email, password) {\n    return this.fetch(`${this.domain}`, {\n      method: 'POST',\n      body: JSON.stringify({\n        email,\n        password\n      })\n    }).then(res => {\n      this.setToken(res.token); // Setting the token in localStorage\n\n      return Promise.resolve(res);\n    });\n  }\n\n  loggedIn() {\n    const token = this.getToken(); //Getting Token from LocalStorage\n\n    if (token !== null && token !== undefined && token !== '') {\n      return !!token;\n    }\n  }\n\n  setToken(idToken) {\n    // Saves user token to localStorage\n    localStorage.setItem('jwtToken', idToken);\n  }\n\n  getToken() {\n    // Retrieves the user token from localStorage\n    return localStorage.getItem('jwtToken');\n  }\n\n  logout() {\n    // Clear user token and profile data from localStorage\n    localStorage.removeItem('jwtToken');\n  }\n\n  getProfile() {\n    // Using jwt-decode npm package to decode the token\n    return decode(this.getToken());\n  }\n\n  fetch(url, options) {\n    const headers = {\n      'Accept': 'application/json',\n      'Content_type': 'application/json'\n    };\n\n    if (this.loggedIn()) {\n      headers['Authorization'] = 'Bearer' + this.getToken();\n    }\n\n    return fetch(url, {\n      headers,\n      ...options\n    }).then(this._checkStatus).then(response => response.json());\n  }\n\n  _checkStatus(response) {\n    // raises an error in case response status is not a success\n    if (response.status >= 200 && response.status < 300) {\n      // Success status lies between 200 to 300\n      return response;\n    } else {\n      var error = new Error(response.statusText);\n      error.response = response;\n      throw error;\n    }\n  }\n\n}","map":{"version":3,"sources":["/home/shivendra/Documents/shiv/reactbasicform/src/Authentication/AuthService.js"],"names":["decode","AuthService","constructor","domain","fetch","bind","login","getProfile","email","password","method","body","JSON","stringify","then","res","setToken","token","Promise","resolve","loggedIn","getToken","undefined","idToken","localStorage","setItem","getItem","logout","removeItem","url","options","headers","_checkStatus","response","json","status","error","Error","statusText"],"mappings":"AAAA,OAAOA,MAAP,MAAmB,YAAnB;AAEA,eAAe,MAAMC,WAAN,CAAkB;AAC7BC,EAAAA,WAAW,CAACC,MAAD,EAAS;AAChB,SAAKA,MAAL,GAAcA,MAAM,IAAI,uBAAxB,CADgB,CACgC;;AAChD,SAAKC,KAAL,GAAa,KAAKA,KAAL,CAAWC,IAAX,CAAgB,IAAhB,CAAb;AACA,SAAKC,KAAL,GAAa,KAAKA,KAAL,CAAWD,IAAX,CAAgB,IAAhB,CAAb;AACA,SAAKE,UAAL,GAAkB,KAAKA,UAAL,CAAgBF,IAAhB,CAAqB,IAArB,CAAlB;AACH;;AAEDC,EAAAA,KAAK,CAACE,KAAD,EAASC,QAAT,EAAmB;AACpB,WAAO,KAAKL,KAAL,CAAY,GAAE,KAAKD,MAAO,EAA1B,EAA6B;AAChCO,MAAAA,MAAM,EAAG,MADuB;AAEhCC,MAAAA,IAAI,EAAGC,IAAI,CAACC,SAAL,CAAe;AAClBL,QAAAA,KADkB;AAElBC,QAAAA;AAFkB,OAAf;AAFyB,KAA7B,EAMJK,IANI,CAMCC,GAAG,IAAE;AAET,WAAKC,QAAL,CAAcD,GAAG,CAACE,KAAlB,EAFS,CAEgB;;AACzB,aAAOC,OAAO,CAACC,OAAR,CAAgBJ,GAAhB,CAAP;AACH,KAVM,CAAP;AAWH;;AAEDK,EAAAA,QAAQ,GAAE;AACN,UAAMH,KAAK,GAAG,KAAKI,QAAL,EAAd,CADM,CACwB;;AAC9B,QAAIJ,KAAK,KAAI,IAAT,IAAiBA,KAAK,KAAGK,SAAzB,IAAsCL,KAAK,KAAK,EAApD,EAAwD;AACpD,aAAO,CAAC,CAACA,KAAT;AACH;AACJ;;AAEDD,EAAAA,QAAQ,CAACO,OAAD,EAAS;AACjB;AACIC,IAAAA,YAAY,CAACC,OAAb,CAAqB,UAArB,EAAgCF,OAAhC;AACH;;AAEDF,EAAAA,QAAQ,GAAE;AACL;AACD,WAAOG,YAAY,CAACE,OAAb,CAAqB,UAArB,CAAP;AACH;;AAEDC,EAAAA,MAAM,GAAE;AACJ;AACAH,IAAAA,YAAY,CAACI,UAAb,CAAwB,UAAxB;AACH;;AAEDrB,EAAAA,UAAU,GAAE;AACZ;AACI,WAAOP,MAAM,CAAC,KAAKqB,QAAL,EAAD,CAAb;AACH;;AAEDjB,EAAAA,KAAK,CAACyB,GAAD,EAAOC,OAAP,EAAgB;AACjB,UAAMC,OAAO,GAAG;AACZ,gBAAU,kBADE;AAEZ,sBAAiB;AAFL,KAAhB;;AAIA,QAAG,KAAKX,QAAL,EAAH,EAAmB;AACfW,MAAAA,OAAO,CAAC,eAAD,CAAP,GAA2B,WAAW,KAAKV,QAAL,EAAtC;AACH;;AAGD,WAAOjB,KAAK,CAAEyB,GAAF,EAAM;AACdE,MAAAA,OADc;AAEd,SAAGD;AAFW,KAAN,CAAL,CAKNhB,IALM,CAKD,KAAKkB,YALJ,EAMNlB,IANM,CAMDmB,QAAQ,IAAIA,QAAQ,CAACC,IAAT,EANX,CAAP;AAOH;;AAEDF,EAAAA,YAAY,CAACC,QAAD,EAAU;AACjB;AACD,QAAIA,QAAQ,CAACE,MAAT,IAAmB,GAAnB,IAA0BF,QAAQ,CAACE,MAAT,GAAiB,GAA/C,EAAoD;AAAE;AAClD,aAAOF,QAAP;AACH,KAFD,MAEO;AACH,UAAIG,KAAK,GAAG,IAAIC,KAAJ,CAAUJ,QAAQ,CAACK,UAAnB,CAAZ;AACAF,MAAAA,KAAK,CAACH,QAAN,GAAiBA,QAAjB;AACA,YAAMG,KAAN;AACH;AACJ;;AA7E4B","sourcesContent":["import decode from 'jwt-decode';\n\nexport default class AuthService {\n    constructor(domain) {\n        this.domain = domain || 'http://localhost:4000' //API Service Domain\n        this.fetch = this.fetch.bind(this);\n        this.login = this.login.bind(this);\n        this.getProfile = this.getProfile.bind(this);\n    }\n\n    login(email , password) {\n        return this.fetch(`${this.domain}`, {\n            method : 'POST',\n            body : JSON.stringify({\n                email,\n                password\n            })\n        }).then(res=>{\n\n            this.setToken(res.token) // Setting the token in localStorage\n            return Promise.resolve(res);\n        })\n    }\n\n    loggedIn(){\n        const token = this.getToken() //Getting Token from LocalStorage\n        if (token!== null && token!==undefined && token !== '') {\n            return !!token\n        }\n    }\n\n    setToken(idToken){\n    // Saves user token to localStorage\n        localStorage.setItem('jwtToken',idToken)\n    }\n\n    getToken(){\n         // Retrieves the user token from localStorage\n        return localStorage.getItem('jwtToken')\n    }\n\n    logout(){\n        // Clear user token and profile data from localStorage\n        localStorage.removeItem('jwtToken');\n    }\n\n    getProfile(){\n    // Using jwt-decode npm package to decode the token\n        return decode(this.getToken());\n    }\n\n    fetch(url , options) {\n        const headers = {\n            'Accept': 'application/json',\n            'Content_type' : 'application/json'\n        }\n        if(this.loggedIn()){\n            headers['Authorization'] = 'Bearer' + this.getToken()\n        }\n\n\n        return fetch (url,{\n            headers,\n            ...options\n        })\n\n        .then(this._checkStatus)\n        .then(response => response.json())\n    }\n\n    _checkStatus(response){\n         // raises an error in case response status is not a success\n        if (response.status >= 200 && response.status <300) { // Success status lies between 200 to 300\n            return response\n        } else {\n            var error = new Error(response.statusText)\n            error.response = response\n            throw error\n        }\n    }\n\n}"]},"metadata":{},"sourceType":"module"}